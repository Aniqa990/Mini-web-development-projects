/*element {
    property: value;
   }*/
   div {
    width: 80%; /*80% of body element*/
    background-color: burlywood;
    margin-left: auto;/*Next, you want to center the div horizontally. You can do this by setting its margin-left and margin-right properties to auto. Think of the margin as invisible space around an element. Using these two margin properties, center the div element within the body element.*/
    margin-right: auto;
  }
    /*width: 300px The goal now is to make the div not take up the entire width of the page. The CSS width property is perfect for this. Create a new type selector in the style sheet that gives your div element a width of 300px.*/
    

body {
  background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);
  font-family: sans-serif;
  padding: 20px;
}


/*So far you have been using type selectors to style elements. A class selector is defined by a name with a dot directly in front of it, like this:

.class-name {
  styles
}*/
.menu {
    width: 80%; 
    background-color: burlywood;
    margin-left: auto;
    margin-right: auto;
    max-width: 500px; /*The current width of the menu will always take up 80% of the body element's width. On a very wide screen, the coffee and dessert appear far apart from their prices.
    Add a max-width property to the menu class with a value of 500px to prevent it from growing too wide.*/
    padding: 20px; /*You can give your menu some space between the content and the sides with various padding properties.
    Since all 4 sides of the menu have the same internal spacing, go ahead and delete the four properties and use a single padding property with the value 20px.
    padding-left: 20px;
    padding-right: 20px;
    padding-top: 20px;
    padding-bottom: 20px;*/
     }
     h1{
      font-size: 40px;
      margin-top: 0px; /*The menu text CAMPER CAFE has a different space from the top than the address's space at the bottom of the menu. This is due to the browser having some default top margin for the h1 element.
      Change the top margin of the h1 element to 0 to remove all the top margin.*/
      margin-bottom: 15px; /*To remove some of the vertical space between the h1 element and the text Est. 2020, change the bottom margin of the h1 to 15px.*/
     }
     h2 {
      font-size: 30px;
    }
    .established {
  font-style: italic;
}

h1, h2 {
  font-family: Impact, serif;
} /*You can add a fallback value for the font-family by adding another font name separated by a comma. Fallbacks are used in instances where the initial is not found/available.*/

h1, h2, p {
  text-align: center;
}

    .flavor, .dessert {
        text-align: left;
        width: 75%;
      }
      
      .price {
        text-align: right;
        width: 25%;
      } /*That is kind of what you want, but now it would be nice if the flavor and price were on the same line. p elements are block-level elements, so they take up the entire width of their parent element.

      To get them on the same line, you need to apply some styling to the p elements, so they behave more like inline elements. Add a class attribute with the value item to the first article element under the Coffee heading.*/
      .item p{
        display: inline-block; /*The p elements are nested in an article element with the class attribute of item. You can style all the p elements nested anywhere in elements with a class named item like this:

        .item p { }
        Using the above selector, add a display property with value inline-block so the p elements behave more like inline elements.
        That's closer, but the price didn't stay over on the right. This is because inline-block elements only take up the width of their content. To spread them out, add a width property to the flavor and price class selectors that have a value of 50% each.
        Well that did not work. Styling the p elements as inline-block and placing them on separate lines in the code creates an extra space to the right of the first p element, causing the second one to shift to the next line. One way to fix this is to make each p element's width a little less than 50%.
        
        Change the width value to 49%.
        That worked, but there is still a little space on the right of the price.
        
        You could keep trying various percentages for the widths. Instead, use the back space key on your keyboard to move the p element with the class price next to the p element with the class flavor so that they are on the same line in the editor. Make sure there is no space between them.
        Now go ahead and change both the flavor and price class' widths to be 50% again.
        If you make the width of the page preview smaller, you will notice at some point, some of the text on the left starts wrapping around to the next line. This is because the width of the p elements on the left side can only take up 50% of the space.
        
        Since you know the prices on the right have significantly fewer characters, change the flavor class width value to be 75% and the price class width value to be 25%.*/
        margin-top: 5px;
        margin-bottom: 5px; /*Focusing on the menu items and prices, there is a fairly large gap between each line.

        Target all the p elements nested in elements with the class named item and set their top and bottom margin to be 5px.*/
        font-size: 18px;
      }



hr{
  height: 3px;  /*The default properties of an hr element will make it appear as a thin light grey line. You can change the height of the line by specifying a value for the height property.*/
  border-color: brown; /*Notice the grey color along the edges of the line. Those edges are known as borders. Each side of an element can have a different color or they can all be the same.*/
  background-color: brown;
}

/* FOOTER */

footer {
  font-size: 14px;
}

.address {
  margin-bottom: 5px;
}

a{
  color: black;/*The default color of a link that has not yet been clicked on is typically blue. The default color of a link that has already been visited from a page is typically purple.

  To make the footer links the same color regardless if a link has been visited, use a type selector for the anchor element (a) and use the value black for the color property.*/
}
a:visited{color: grey;}/*You change properties of a link when the link has actually been visited by using a pseudo-selector that looks like a:visited { propertyName: propertyValue; }.*/
a:hover{color: brown;}/*You change properties of a link when the mouse hovers over them by using a pseudo-selector that looks like a:hover { propertyName: propertyValue; }.*/
a:active{color: white;}/*You change properties of a link when the link is actually being clicked by using a pseudo-selector that looks like a:active { propertyName: propertyValue; }.*/


img{
  display: block;
  margin-left: auto;
  margin-right: auto;
  margin-top: -25px; /*It would be nice if the vertical space between the h2 elements and their associated icons was smaller. The h2 elements have default top and bottom margin space, so you could change the bottom margin of the h2 elements to say 0 or another number.
There is an easier way, simply add a negative top margin to the img elements to pull them up from their current positions. Negative values are created using a - in front of the value. To complete this project, go ahead and use a negative top margin of 25px in the img type selector.*/
} /*The image you added is not centered horizontally like the Coffee heading above it. img elements are "like" inline elements. To make the image behave like heading elements (which are block-level), create an img type selector and use the value block for the display property and use the applicable margin-left and margin-right values to center it horizontally.*/


.bottom-line {
  margin-top: 25px;
}