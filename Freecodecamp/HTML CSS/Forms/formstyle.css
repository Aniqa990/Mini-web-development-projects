body {
    width: 100%;
    height: 100vh; /*The vh unit stands for viewport height, and is relative to 1% of the height of the viewport.*/
    margin: 0; /*Now, get rid of the horizontal scroll-bar, by setting the body default margin added by some browsers to 0.*/
    background-color: #1b1b32;
    color: #f5f6f7;
    font-family: Tahoma;
    font-size: 16px;
  }
  
  h1, p {
    margin: 1em auto;
    text-align: center;
  }
  
  form {
    width: 60vw; /*viewport width or viewport height wrt body tag*/
    max-width: 500px;
    min-width: 300px;
    margin: 0 auto;
    padding-bottom: 2em; /*2em means twice of original size*/
  }
  
  fieldset {
    border: none;
    padding: 2rem 0;
    border-bottom: 3px solid #3b3b4f;
  }
  
  fieldset:last-of-type { /*The border of the last fieldset element looks a little out of place. You can select the last element of a specific type using the last-of-type CSS pseudo-class, like this:
    p:last-of-type { }
    That will select the last p element.*/
    border-bottom: none;
  }
  
  label {
    display: block;
    margin: 0.5rem 0; /*The rem unit stands for root em, and is relative to the font size of the html element. As label elements are inline by default, they are all displayed side by side on the same line, making their text hard to read. To make them appear on separate lines, add display: block to the label element, and add a margin of 0.5rem 0, to separate them from each other.*/
  }
  
  input,
  textarea,
  select {
    margin: 10px 0 0 0;
    width: 100%;
    min-height: 2em;
  }
  
  input, textarea {
    background-color: #0a0a23;
    border: 1px solid #0a0a23;
    color: #ffffff;
  }
  
  .inline {
    /*Select only the .inline elements, and give them width of unset. This will remove the earlier rule which set all the input elements to width: 100%.*/
    width: unset;
    margin: 0 0.5em 0 0;
    vertical-align: middle; /*If you look close enough, you will notice the .inline elements are too high on the line. To combat this, set the vertical-align property to middle.*/
  }
  
/*To style the submit button, you can use an attribute selector, which selects an element based on the given attribute value. Here is an example:
input[name="password"]
The above selects input elements with a name attribute value of password.*/

  input[type="submit"] {
    display: block;
    width: 60%;
    margin: 1em auto;
    height: 2em;
    font-size: 1.1rem;
    background-color: #3b3b4f;
    border-color: white;
    min-width: 300px;
  }
  
  input[type="file"] {
    padding: 1px 2px;
  }
  
  a{
    color:#dfdfe2;
  }






